(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{406:function(e,s,n){"use strict";n.r(s);var a=n(15),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"常用插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用插件"}},[e._v("#")]),e._v(" 常用插件")]),e._v(" "),n("h2",{attrs:{id:"html-webpack-plugin-插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#html-webpack-plugin-插件"}},[e._v("#")]),e._v(" html-webpack-plugin 插件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('html-webpack-plugin自动生成index.html文件，并加载bundle.js\n\nnpm install -D html-webpack-plugin\n\n并在webpack.config.js中配置\n    ...\n    plugins: [\n        new HtmlWebpackPlugin()\n    ]\n    ...\n\n生成的html文件/dist/index.html\n\n    <!doctype html>\n        <html>\n\n        <head>\n            <meta charset="utf-8">\n            <title>Webpack App</title>\n            <meta name="viewport" content="width=device-width,initial-scale=1">\n            <script defer="defer" src="bundle.js"><\/script>\n        </head>\n\n        <body></body>\n\n    </html>\n')])])]),n("h2",{attrs:{id:"webpack-dev-server-插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server-插件"}},[e._v("#")]),e._v(" webpack-dev-server 插件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('npm install -D webpack-dev-server\n\n修改package.json，添加start命令\n\n"scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "build": "webpack",\n    "start": "webpack serve --open chrome.exe"\n},\n\ncmd执行npm start，自动创建并启动一个服务dist目录的开发服务器\n')])])]),n("h2",{attrs:{id:"clean-webpack-plugin-插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clean-webpack-plugin-插件"}},[e._v("#")]),e._v(" clean-webpack-plugin 插件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("npm install -D clean-webpack-plugin\n\n清空上次打包生成的文件，避免文件版本问题\n\n修改webpack.config.js\n\n    ...\n    plugins: [\n        ...\n        //清楚webpack缓存\n        new CleanWebpackPlugin()\n        ...\n    ]\n    ...\n")])])]),n("h2",{attrs:{id:"兼容插件-babel-core-babel-preset-env-babel-loader-core-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#兼容插件-babel-core-babel-preset-env-babel-loader-core-js"}},[e._v("#")]),e._v(" 兼容插件@babel/core @babel/preset-env babel-loader core-js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('npm install - D @babel/core @babel/preset-env babel-loader core-js\n\n需要考虑兼容低版本浏览器时使用\n\n@babel/core         核心\n@babel/preset-env   预设环境\nbabel-loader        配合webpack\ncore-js             配合webpack，提供fallback方案，当preset-env预设的环境不支持某些功能时，会使用core-js提供的方案\n\n修改webpack.config.js，添加babel-loader配置\n\n    rules: [\n        {\n            test: /\\.ts$/,\n            // use: \'ts-loader\',\n            // 多个loader，是倒序执行的\n            // 先交个ts-loader解析，然后把解析后的资源交给\n            use: [\n                // 解决兼容性，添加babel-loader\n                // \'babel-loader\',\n                // 只会处理模块中的兼容性问题，webpack打包过程中生成的代码兼容性无法在此处理，需要配置webpack的兼容性：output.environment\n                {   // 详细配置一个loader\n                    loader: \'babel-loader\',\n                    options: {\n                        presets: [\n                            [\n                                "@babel/preset-env",\n                                {\n                                    // 兼容到具体的浏览器及版本\n                                    targets: {\n                                        "chrome": "88",\n                                        "ie": "11"\n                                    },\n                                    //指定corejs的版本（主版本）\n                                    "corejs": "3",\n                                    // 使用corejs的方式  usage：按需加载\n                                    "useBuiltIns": "usage"\n                                }\n                            ]\n                        ]\n                    }\n                },\n                \'ts-loader\' // 简单配置一个loader\n            ]\n        }\n    ]\n')])])]),n("h2",{attrs:{id:"less-less-loader-css-loader-style-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#less-less-loader-css-loader-style-loader"}},[e._v("#")]),e._v(" less less-loader css-loader style-loader")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('npm install -D less less-loader css-loader style-loader\n\nless less-loader    配合webpack编译less语法代码\ncss-loader          处理css代码\nstyle-loader        将编译输出的css通过style标签注入到html中\n\n修改webpack.config.js 添加style-loader css-loader less-loader\n    ...\n    module: {\n        rules: [\n            ...\n            {\n                test: /\\.less$/,\n                use: [\n                    "style-loader",\n                    "css-loader",\n                    "less-loader",\n                ]\n            }\n        ]\n    }\n    ...\n')])])]),n("h2",{attrs:{id:"postcss-postcss-loader-postcss-preset-env"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postcss-postcss-loader-postcss-preset-env"}},[e._v("#")]),e._v(" postcss postcss-loader postcss-preset-env")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('npm install -D postcss postcss-loader postcss-preset-env\n\npostcss postcss-loader  配合webpack解决css兼容性问题\npostcss-preset-env      预设要兼容的目标环境\n\n修改webpack.config.js 添加postcss-loader\n    ...\n    module: {\n        rules: [\n            ...\n            {\n                test: /\\.less$/,\n                use: [\n                    "style-loader",\n                    "css-loader",\n                    {\n                        loader: "postcss-loader",\n                        options: {\n                            postcssOptions: {\n                                plugins: [\n                                    [\n                                        "postcss-preset-env", // 插件\n                                        {\n                                            browsers: "last 2 versions" // postcss-preset-env 配置\n                                        }\n                                    ]\n                                ]\n                            }\n                        }\n                    },\n                    "less-loader",\n                ]\n            }\n        ]\n    }\n    ...\n\n    注入html中的css 具有兼容前缀\n\n        body {\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            background: #fba;\n        }\n')])])]),n("h2",{attrs:{id:"webpack-打包生成的代码的兼容性问题解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包生成的代码的兼容性问题解决"}},[e._v("#")]),e._v(" webpack 打包生成的代码的兼容性问题解决")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('修改webpack.config.js，配置output.environment\n\n    output: {\n        path: path.resolve(__dirname, "dist"),\n\n        filename: "bundle.js",\n\n        // webpack生成代码的兼容性配置项\n        environment: {\n            //禁用webpack生成箭头函数\n            arrowFunction: false\n        }\n    }\n')])])])])}),[],!1,null,null,null);s.default=t.exports}}]);